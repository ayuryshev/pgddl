\pset null _null_
SET client_min_messages = warning;
CREATE EXTENSION file_fdw;
CREATE EXTENSION adminpack;
CREATE TEMPORARY TABLE t1 AS SELECT pg_file_unlink('pgddltest.tmp');
SELECT pg_file_write('pgddltest.tmp',E'Hello, World!\nThis is some text\n',false);
 pg_file_write 
---------------
            32
(1 row)

CREATE SERVER serv FOREIGN DATA WRAPPER file_fdw;
CREATE FOREIGN TABLE test_class_f (
  line text
) 
SERVER serv
OPTIONS ( filename 'pgddltest.tmp', format 'text' );
COMMENT ON FOREIGN TABLE test_class_f IS 'A Foreign table';
COMMENT ON COLUMN test_class_f.line IS 'A Line of text';
GRANT ALL ON test_class_f TO PUBLIC;
SELECT * FROM test_class_f;
       line        
-------------------
 Hello, World!
 This is some text
(2 rows)

SELECT pg_ddlx_script('test_class_f'::regclass);
                       pg_ddlx_script                        
-------------------------------------------------------------
 BEGIN;                                                     +
 -- SECTION MAIN                                            +
                                                            +
 -- DROP FOREIGN TABLE test_class_f;                        +
                                                            +
 -- Type: FOREIGN TABLE ; Name: test_class_f; Owner: root   +
                                                            +
 CREATE FOREIGN TABLE test_class_f (                        +
     line text                                              +
 )                                                          +
 SERVER serv                                                +
 OPTIONS (                                                  +
     filename 'pgddltest.tmp',                              +
     format 'text'                                          +
 );                                                         +
                                                            +
 COMMENT ON FOREIGN TABLE test_class_f IS 'A Foreign table';+
 COMMENT ON COLUMN test_class_f.line IS 'A Line of text';   +
                                                            +
 ALTER FOREIGN TABLE test_class_f OWNER TO root;            +
 END;                                                       +
 
(1 row)

SELECT pg_ddlx_create((select oid from pg_foreign_data_wrapper where fdwname='file_fdw'));
            pg_ddlx_create            
--------------------------------------
 CREATE FOREIGN DATA WRAPPER file_fdw+
 HANDLER file_fdw_handler            +
 VALIDATOR file_fdw_validator;       +
 
(1 row)

SELECT pg_ddlx_drop((select oid from pg_foreign_data_wrapper where fdwname='file_fdw'));
            pg_ddlx_drop             
-------------------------------------
 DROP FOREIGN DATA WRAPPER file_fdw;+
 
(1 row)

SELECT pg_ddlx_create((select oid from pg_foreign_server where srvname='serv'));
         pg_ddlx_create         
--------------------------------
 CREATE SERVER serv            +
 FOREIGN DATA WRAPPER file_fdw;+
 
(1 row)

SELECT pg_ddlx_drop((select oid from pg_foreign_server where srvname='serv'));
   pg_ddlx_drop    
-------------------
 DROP SERVER serv;+
 
(1 row)

CREATE EXTENSION postgres_fdw;
CREATE SERVER serv2 
FOREIGN DATA WRAPPER postgres_fdw
OPTIONS (host 'localhost');
CREATE USER MAPPING FOR PUBLIC 
SERVER serv2 
OPTIONS (user 'foo');
SELECT pg_ddlx_create((select oid from pg_foreign_data_wrapper where fdwname='postgres_fdw'));
              pg_ddlx_create              
------------------------------------------
 CREATE FOREIGN DATA WRAPPER postgres_fdw+
 HANDLER postgres_fdw_handler            +
 VALIDATOR postgres_fdw_validator;       +
 
(1 row)

SELECT pg_ddlx_create((select oid from pg_foreign_server where srvname='serv2'));
          pg_ddlx_create           
-----------------------------------
 CREATE SERVER serv2              +
 FOREIGN DATA WRAPPER postgres_fdw+
 OPTIONS (                        +
     host 'localhost'             +
 );                               +
 
(1 row)

SELECT pg_ddlx_create((select umid from pg_user_mappings where srvname='serv2' and usename='public'));
               pg_ddlx_create                
---------------------------------------------
 CREATE USER MAPPING FOR public SERVER serv2+
 OPTIONS (                                  +
     "user" 'foo'                           +
 );                                         +
 
(1 row)

SELECT pg_ddlx_drop((select umid from pg_user_mappings where srvname='serv2' and usename='public'));
                pg_ddlx_drop                
--------------------------------------------
 DROP USER MAPPING FOR public SERVER serv2;+
 
(1 row)

