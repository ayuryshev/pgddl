\pset null _null_
\pset format unaligned
SET client_min_messages = warning;
SET ROLE postgres;
select ddlx_create(oid) from pg_cast where castsource = 'text'::regtype order by casttarget;
ddlx_create
CREATE CAST (text AS "char")
  WITH FUNCTION "char"(text)
  AS ASSIGNMENT;
COMMENT ON CAST (text AS "char") IS NULL;

CREATE CAST (text AS name)
  WITH FUNCTION name(text)
  AS IMPLICIT;
COMMENT ON CAST (text AS name) IS NULL;

CREATE CAST (text AS xml)
  WITH FUNCTION xml(text);
COMMENT ON CAST (text AS xml) IS NULL;

CREATE CAST (text AS character)
  WITHOUT FUNCTION
  AS IMPLICIT;
COMMENT ON CAST (text AS character) IS NULL;

CREATE CAST (text AS character varying)
  WITHOUT FUNCTION
  AS IMPLICIT;
COMMENT ON CAST (text AS character varying) IS NULL;

CREATE CAST (text AS regclass)
  WITH FUNCTION regclass(text)
  AS IMPLICIT;
COMMENT ON CAST (text AS regclass) IS NULL;

(6 rows)
select ddlx_drop(oid) from pg_cast where castsource = 'text'::regtype order by casttarget;
ddlx_drop
DROP CAST (text AS "char");

DROP CAST (text AS name);

DROP CAST (text AS xml);

DROP CAST (text AS character);

DROP CAST (text AS character varying);

DROP CAST (text AS regclass);

(6 rows)
CREATE COLLATION "POSIX++" (
  LC_COLLATE = 'POSIX',
  LC_CTYPE = 'POSIX'
);
COMMENT ON COLLATION "POSIX++" IS 'standard POSIX++ collation';
select ddlx_create(oid) from pg_collation where collname in ('POSIX++') order by collname;
ddlx_create
CREATE COLLATION "POSIX++" (
  LC_COLLATE = 'POSIX',
  LC_CTYPE = 'POSIX'
);
COMMENT ON COLLATION "POSIX++" IS 'standard POSIX++ collation';
ALTER COLLATION "POSIX++" OWNER TO postgres;

(1 row)
select ddlx_drop(oid) from pg_collation where collname in ('POSIX++') order by collname;
ddlx_drop
DROP COLLATION "POSIX++";

(1 row)
CREATE DEFAULT CONVERSION "ascii_to_utf8++"
  FOR 'SQL_ASCII' TO 'UTF8' FROM ascii_to_utf8;
COMMENT ON CONVERSION "ascii_to_utf8++" IS 'conversion++ for SQL_ASCII to UTF8';
select ddlx_create(oid) from pg_conversion where conname in ('ascii_to_utf8++') order by conname;
ddlx_create
CREATE DEFAULT CONVERSION "ascii_to_utf8++"
  FOR 'SQL_ASCII' TO 'UTF8' FROM ascii_to_utf8;
COMMENT ON CONVERSION "ascii_to_utf8++" IS 'conversion++ for SQL_ASCII to UTF8';
ALTER CONVERSION "ascii_to_utf8++" OWNER TO postgres;

(1 row)
select ddlx_drop(oid) from pg_conversion where conname in ('ascii_to_utf8++') order by conname;
ddlx_drop
DROP CONVERSION "ascii_to_utf8++";

(1 row)
select ddlx_grants('test_class_r'::regclass::oid);
ddlx_grants
GRANT INSERT ON TABLE test_class_r TO postgres;
GRANT SELECT ON TABLE test_class_r TO postgres;
GRANT UPDATE ON TABLE test_class_r TO postgres;
GRANT DELETE ON TABLE test_class_r TO postgres;
GRANT TRUNCATE ON TABLE test_class_r TO postgres;
GRANT REFERENCES ON TABLE test_class_r TO postgres;
GRANT TRIGGER ON TABLE test_class_r TO postgres;
GRANT INSERT ON TABLE test_class_r TO PUBLIC;
GRANT SELECT ON TABLE test_class_r TO PUBLIC;
GRANT UPDATE ON TABLE test_class_r TO PUBLIC;
GRANT DELETE ON TABLE test_class_r TO PUBLIC;
GRANT TRUNCATE ON TABLE test_class_r TO PUBLIC;
GRANT REFERENCES ON TABLE test_class_r TO PUBLIC;
GRANT TRIGGER ON TABLE test_class_r TO PUBLIC;

(1 row)
select ddlx_create(oid) from pg_am where amname = 'btree';
ddlx_create
CREATE ACCESS METHOD btree
  TYPE INDEX HANDLER bthandler;

COMMENT ON ACCESS METHOD btree IS 'b-tree index access method';

(1 row)
select ddlx_drop(oid) from pg_am where amname = 'btree';
ddlx_drop
DROP ACCESS METHOD btree;

(1 row)
create operator family opf1 using btree;
comment on operator family opf1 using btree is 'A comment';
select ddlx_create(oid) from pg_opfamily where opfname='opf1';
ddlx_create
CREATE OPERATOR FAMILY opf1 USING btree;
COMMENT ON OPERATOR FAMILY opf1 USING btree IS 'A comment';
ALTER OPERATOR FAMILY opf1 USING btree OWNER TO postgres;

(1 row)
select ddlx_drop(oid) from pg_opfamily where opfname='opf1';
ddlx_drop
DROP OPERATOR FAMILY opf1 USING btree;

(1 row)
